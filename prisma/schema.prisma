// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                  String               @id @default(cuid())
  name                String
  subdomain           String               @unique
  users               User[]
  properties          Property[]
  units               Unit[]
  leases              Lease[]
  maintenanceRequests MaintenanceRequest[]
  notifications       Notification[]
  webhooks            NotificationWebhook[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  passwordHash String?
  profileImage String? // URL to profile image
  companyName String? // Company name for branding
  companyLogo String? // URL to company logo
  role      String // owner, admin, manager, maintenance, accountant
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Property assignment for tenants
  propertyId String?
  property   Property? @relation("UserProperty", fields: [propertyId], references: [id], onDelete: SetNull)
  
  notifications Notification[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Property {
  id                 String               @id @default(cuid())
  tenantId           String
  tenant             Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name               String
  address            String
  city               String
  country            String               @default("DE")
  units              Unit[]
  invites            Invite[]
  
  // User assignments
  assignedUsers      User[]               @relation("UserProperty")
  
  // UI/display fields
  title              String               @default("")
  imageUrl           String               @default("")
  imageHint          String?
  type               String               @default("Apartment")
  assignedWorkerId   String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  MaintenanceRequest MaintenanceRequest[]
}

model MaintenanceRequest {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  propertyId       String
  property         Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  issue            String
  details          String?
  dateSubmitted    DateTime
  priority         String
  status           String // New | In Progress | Completed
  assignedWorkerId String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Unit {
  id         String   @id @default(cuid())
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  label      String // e.g. A-101
  bedrooms   Int      @default(1)
  rent       Decimal  @db.Decimal(10, 2)
  leases     Lease[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Lease {
  id          String    @id @default(cuid())
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  unitId      String
  unit        Unit      @relation(fields: [unitId], references: [id], onDelete: Cascade)
  resident    String // can be split to Resident model later
  startDate   DateTime
  endDate     DateTime?
  monthlyRent Decimal   @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Invite {
  id         String   @id @default(cuid())
  tenantId   String
  email      String
  userId     String
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  
  // Property assignment for tenant invites
  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  // (optional) referential integrity if you want:
  // user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Target user (can be null for role-based notifications)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Notification content
  title       String
  description String
  icon        String   @default("Bell") // Lucide icon name
  type        String   @default("info") // info, success, warning, error
  priority    String   @default("normal") // low, normal, high, urgent
  
  // Navigation and interaction
  navigationUrl String?
  actionLabel   String?
  actionUrl     String?
  
  // Status
  read        Boolean  @default(false)
  readAt      DateTime?
  
  // Role targeting (for role-based notifications)
  targetRole  String? // admin, tenant, worker, etc.
  
  // Related entities (for context)
  relatedType String? // property, maintenance_request, tenant, etc.
  relatedId   String?
  
  // Metadata
  metadata    Json?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Webhook deliveries
  webhookDeliveries NotificationWebhookDelivery[]
}

model NotificationWebhook {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  name        String
  url         String
  secret      String?  // For webhook signature verification
  active      Boolean  @default(true)
  
  // Event filtering
  events      String[] // Array of event types to subscribe to
  
  // Headers
  headers     Json?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  deliveries  NotificationWebhookDelivery[]
}

model NotificationWebhookDelivery {
  id             String              @id @default(cuid())
  webhookId      String
  webhook        NotificationWebhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  notificationId String
  notification   Notification        @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  
  // Delivery details
  status         String   @default("pending") // pending, delivered, failed, retrying
  statusCode     Int?
  responseBody   String?
  error          String?
  
  // Retry information
  attempts       Int      @default(0)
  maxAttempts    Int      @default(3)
  nextRetryAt    DateTime?
  
  sentAt         DateTime?
  deliveredAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
