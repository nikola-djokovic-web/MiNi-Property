// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                  String               @id @default(cuid())
  name                String
  subdomain           String               @unique
  users               User[]
  properties          Property[]
  units               Unit[]
  leases              Lease[]
  maintenanceRequests MaintenanceRequest[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String // owner, admin, manager, maintenance, accountant
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Property {
  id                 String               @id @default(cuid())
  tenantId           String
  tenant             Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name               String
  address            String
  city               String
  country            String               @default("DE")
  units              Unit[]
  // UI/display fields
  title              String               @default("")
  imageUrl           String               @default("")
  imageHint          String?
  type               String               @default("Apartment")
  assignedWorkerId   String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  MaintenanceRequest MaintenanceRequest[]
}

model MaintenanceRequest {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  propertyId       String
  property         Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  issue            String
  details          String?
  dateSubmitted    DateTime
  priority         String
  status           String // New | In Progress | Completed
  assignedWorkerId String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Unit {
  id         String   @id @default(cuid())
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  label      String // e.g. A-101
  bedrooms   Int      @default(1)
  rent       Decimal  @db.Decimal(10, 2)
  leases     Lease[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Lease {
  id          String    @id @default(cuid())
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  unitId      String
  unit        Unit      @relation(fields: [unitId], references: [id], onDelete: Cascade)
  resident    String // can be split to Resident model later
  startDate   DateTime
  endDate     DateTime?
  monthlyRent Decimal   @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
